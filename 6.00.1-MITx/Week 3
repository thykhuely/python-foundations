# Recursive
#Problem 1: Iretative vs. Recursive Exponent 

def iterPower(base, exp):
    '''
    base: int or float.
    exp: int >= 0
 
    returns: int or float, base^exp
    '''
    result = 1
    if exp == 0:
        result = 1
    while exp > 0: 
            result = result * base
            exp -= 1
        
    return float(result)
    
def recurPower(base, exp):
    '''
    base: int or float.
    exp: int >= 0
 
    returns: int or float, base^exp
    '''
    if exp == 0:
        return 1
    return base * recurPower(base, exp-1)

def recurPowerNew(base, exp):
    '''
    base: int or float.
    exp: int >= 0

    returns: int or float; base^exp
    '''
    if exp == 0:
        return 1
    elif (exp % 2) == 0: 
        return recurPowerNew(base * base, exp/2)
    else: 
        return base * recurPowerNew(base, exp-1)

#Problem 2: Iretative vs. Recursive Exponent 

def gcdIter(a, b):
    '''
    a, b: positive integers
    
    returns: a positive integer, the greatest common divisor of a & b.
    '''
    gcd = min(a, b)
    
    while (a % gcd != 0) or (b % gcd != 0):
        gcd = gcd - 1
    return gcd
    
#Problem 3: Tower of Hanoi

def printMove(fr, to):
    print('move from ' + str(fr) + ' to ' + str(to))

def Towers(n, fr, to, spare):
    if n == 1:
        printMove(fr, to)
    else:
        Towers(n-1, fr, spare, to)
        Towers(1, fr, to, spare)
        Towers(n-1, spare, to, fr)
        
def lenRecur(aStr):
    '''
    aStr: a string
    
    returns: int, the length of aStr
    '''
    # Base case: When aStr is the empty string, its length is zero.
    if aStr == '':
        return 0

    # Recursive case: If the string is not zero-length, then remove the first
    #  character and the length is 1 + the length of the rest of the string
    return 1 + lenRecur(aStr[1:])


# Problem 8: Bisection search 
def isIn(char, aStr):
    '''
    char: a single character
    aStr: an alphabetized string
    
    returns: True if char is in aStr; False otherwise
    '''
    # base case: 
    if aStr == '' and char !='':
        return False
    
    if len(aStr) == 1: 
        return aStr == char
    
    # recursive case:
    mid_index = len(aStr)/2
    mid_char = aStr[mid_index]
    
    if char == mid_char:
       return True
       
    elif char < mid_char: 
        return isIn(char, aStr[:mid_index])
    else:    
       return isIn(char, aStr[mid_index:])

# Problem 9: Semordnilap

def semordnilap(str1, str2):
    '''
    str1: a string
    str2: a string
    
    returns: True if str1 and str2 are semordnilap;
             False otherwise.
    '''
    # base case:
    if len(str1) == 1 or len(str2) == 1: 
        return str1 == str2
    
    # recursive case:
    if str1[0] == str2[-1]:
        return semordnilap(str1[1:], str2[:-1])
    else: 
        return False


def semordnilapWrapper(str1, str2):
    # A single-length string cannot be semordnilap
    if len(str1) == 1 or len(str2) == 1:
        return False

    # Equal strings cannot be semordnilap
    if str1 == str2:
        return False

    return semordnilap(str1, str2)

# Problem 10: ndigit recursion

def ndigits(x): 
    '''
    x: an integer, negaitve or positive
    returns: number of digits in x
    
    '''
    # base case
    # if x is a one-digit number
    if x // 10 == 0:
         return 1
         
    # recursive case:
    # splitting the integer into digits 
    # by dividing absolute valye of x by 10
    else:
        return 1 + ndigits(abs(x) // 10)
    
